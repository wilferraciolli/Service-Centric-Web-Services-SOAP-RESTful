/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clienttotest;

import currency.GetConversionRate;
import currency.GetConversionRateResponse;
import flight.FlightType;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

/**
 *
 * @author Wiliam
 */
@SuppressWarnings("unchecked")
public class clientGUI extends javax.swing.JFrame {

    /**
     * Creates new form clientGUI
     */
    public clientGUI() {
        //Create the JFrame
        initComponents();

        //Fill in origin city
        List<String> citiesAvailableFrom = new ArrayList<String>();
        citiesAvailableFrom = getOriginCities();
        Iterator itrCities = citiesAvailableFrom.iterator();
        while (itrCities.hasNext()) {
            cBoxOriginCities.addItem(itrCities.next().toString());
            //cBoxFromMaps.addItem(itrCities.next().toString());
        }

        //Fill in origin and destination addresses for maps
        List<String> addresses = new ArrayList<String>();
        addresses = getAirportAddress();
        Iterator itrAddress = addresses.iterator();
        String airportAddresses = "";
        while (itrAddress.hasNext()) {
            airportAddresses = itrAddress.next().toString();
            cBoxFromMaps.addItem(airportAddresses);
            cBoxToMaps.addItem(airportAddresses);
        }
        cBoxToMaps.setSelectedItem("Manchester");

        //Fill in cities to get the weather
        List<String> citiesWeather = new ArrayList<>();
        citiesWeather = getAirportAddress();
        Iterator itrCitiesweather = citiesWeather.iterator();
        while (itrCitiesweather.hasNext()) {
            cBoxCityWeather.addItem(itrCitiesweather.next().toString());
        }

        //Fill in flight ID codes for the booking and advanced search Panels
        List<String> flightIDsAvailable = new ArrayList<String>();
        flightIDsAvailable = getFlightIDs();
        Iterator itrFlightIDs = flightIDsAvailable.iterator();
        while (itrFlightIDs.hasNext()) {
            String temp = itrFlightIDs.next().toString();
            cBoxFlightID.addItem(temp);
            cBoxFlightIDInfo.addItem(temp);
        }

        //Fill in the drop down box with all the currencies available
        List<String> currenciesAvailable = new ArrayList<String>();
        currenciesAvailable = getCurrencyCodes();
        Iterator itrCurrencies = currenciesAvailable.iterator();
        while (itrCurrencies.hasNext()) {
            cBoxCurrency.addItem(itrCurrencies.next().toString());
        }
        cBoxCurrency.setSelectedItem("GBP - British pound");

        //fill in tickets number
        for (int i = 1; i < 100; i++) {
            // StringSeats = Integer.toString(i)
            cBoxNumberOfTicketsSearch.addItem(i);
        }
        
        //Fill in the date on search by date
        txtDate.setText("01/01/2015");

//          btnGetWeather.addActionListener(new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent ae){
//               Weather weatherPanel = new Weather(); 
//               weatherPanel.setVisible(true);
//               
//               weatherPanel.show();
//            }
//        });
    }//ends constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        tpaneSearchBookings = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        lblOrigin = new javax.swing.JLabel();
        lblDestination = new javax.swing.JLabel();
        cBoxOriginCities = new javax.swing.JComboBox();
        cBoxDestinationCity = new javax.swing.JComboBox();
        cBoxCurrency = new javax.swing.JComboBox();
        lblCurrency = new javax.swing.JLabel();
        rBtnDirectFlights = new javax.swing.JRadioButton();
        btnGo = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cBoxNumberOfTicketsSearch = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        cBoxFlightID = new javax.swing.JComboBox();
        lblflightID = new javax.swing.JLabel();
        lblPassengerName = new javax.swing.JLabel();
        lblNumberOfTickets = new javax.swing.JLabel();
        cBoxNumberOfTickets = new javax.swing.JComboBox();
        btnBook = new javax.swing.JButton();
        txtPassengerName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        btnGetDirections = new javax.swing.JButton();
        cBoxFromMaps = new javax.swing.JComboBox();
        cBoxToMaps = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        btnGetWeather = new javax.swing.JButton();
        cBoxCityWeather = new javax.swing.JComboBox();
        lblCityWeather = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btnGetFlightByDate = new javax.swing.JButton();
        btnCheckFlightInfo = new javax.swing.JButton();
        cBoxFlightIDInfo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtDisplay.setEditable(false);
        txtDisplay.setColumns(1);
        txtDisplay.setRows(10);
        jScrollPane1.setViewportView(txtDisplay);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\Cloud\\Dropbox\\4 UNI\\Service Centric Cloud Computing\\LABs\\FlightAgencyWSClient\\images\\logo.png")); // NOI18N

        tpaneSearchBookings.setBackground(new java.awt.Color(51, 51, 51));
        tpaneSearchBookings.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblOrigin.setText("From:");

        lblDestination.setText("To:");

        cBoxOriginCities.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxOriginCitiesItemStateChanged(evt);
            }
        });

        cBoxCurrency.setSelectedItem(btnGo);

        lblCurrency.setText("Currency:");

        rBtnDirectFlights.setText("Direct flights");

        btnGo.setText("Search");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        jLabel4.setText("Number of Tickets");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigin)
                            .addComponent(lblDestination)
                            .addComponent(jLabel4)
                            .addComponent(lblCurrency))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 284, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cBoxCurrency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cBoxNumberOfTicketsSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(rBtnDirectFlights))
                            .addComponent(cBoxDestinationCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cBoxOriginCities, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOrigin)
                    .addComponent(cBoxOriginCities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxDestinationCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDestination))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cBoxCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCurrency))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rBtnDirectFlights)
                    .addComponent(jLabel4)
                    .addComponent(cBoxNumberOfTicketsSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGo)
                .addContainerGap())
        );

        tpaneSearchBookings.addTab("Search Flights", jPanel2);

        cBoxFlightID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cBoxFlightIDItemStateChanged(evt);
            }
        });

        lblflightID.setText("Flight ID:");

        lblPassengerName.setText("Passenger Name:");

        lblNumberOfTickets.setText("Number of Tickets:");

        btnBook.setText("Book");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBook)
                        .addGap(22, 22, 22))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassengerName)
                            .addComponent(lblNumberOfTickets)
                            .addComponent(lblflightID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cBoxNumberOfTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtPassengerName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cBoxFlightID, javax.swing.GroupLayout.Alignment.LEADING, 0, 211, Short.MAX_VALUE)))
                        .addGap(21, 21, 21))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblflightID)
                    .addComponent(cBoxFlightID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassengerName)
                    .addComponent(txtPassengerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxNumberOfTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumberOfTickets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(btnBook)
                .addContainerGap())
        );

        tpaneSearchBookings.addTab("Book flights", jPanel3);

        lblFrom.setText("From:");

        lblTo.setText("To:");

        btnGetDirections.setText("Get Directions");
        btnGetDirections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDirectionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGetDirections)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFrom)
                            .addComponent(lblTo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cBoxFromMaps, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cBoxToMaps, 0, 300, Short.MAX_VALUE))))
                .addContainerGap(230, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFrom)
                    .addComponent(cBoxFromMaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTo)
                    .addComponent(cBoxToMaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(btnGetDirections)
                .addContainerGap())
        );

        tpaneSearchBookings.addTab("Maps", jPanel1);

        btnGetWeather.setText("Weather");
        btnGetWeather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetWeatherActionPerformed(evt);
            }
        });

        lblCityWeather.setText("City:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGetWeather)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblCityWeather)
                        .addGap(47, 47, 47)
                        .addComponent(cBoxCityWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBoxCityWeather, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCityWeather))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(btnGetWeather)
                .addGap(31, 31, 31))
        );

        tpaneSearchBookings.addTab("Weather", jPanel4);

        btnGetFlightByDate.setText("Get Flights by Date");
        btnGetFlightByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetFlightByDateActionPerformed(evt);
            }
        });

        btnCheckFlightInfo.setText("Check Flight Info");
        btnCheckFlightInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckFlightInfoActionPerformed(evt);
            }
        });

        jLabel2.setText("Please select the flight ID");

        jLabel3.setText("Please select a date");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(62, 62, 62)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cBoxFlightIDInfo, 0, 181, Short.MAX_VALUE)
                    .addComponent(txtDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCheckFlightInfo)
                    .addComponent(btnGetFlightByDate))
                .addGap(26, 26, 26))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckFlightInfo)
                    .addComponent(cBoxFlightIDInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetFlightByDate)
                    .addComponent(jLabel3)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        tpaneSearchBookings.addTab("Advanced Search", jPanel5);

        btnRefresh.setText("Fill flights");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(btnRefresh)
                .addContainerGap(483, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(btnRefresh)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        tpaneSearchBookings.addTab("Admin", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(tpaneSearchBookings, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(tpaneSearchBookings, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // method to get weather ********************************************************************************************
    private void btnGetWeatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetWeatherActionPerformed

        WeatherRest weatherAPI = new WeatherRest();
        weatherAPI.getWeather(cBoxCityWeather.getSelectedItem().toString());
        weatherAPI.setVisible(true);

        // Weather weatherPanel = new Weather();
        // weatherPanel.setVisible(true);
        //JPanel weatherPanel = new JPanel();
        //weatherPanel.add(Weather);
        //  Weather weatherPanel = new Weather();
        // weatherPanel.dis
        //weatherPanel.setVisible(true);
        //weatherPanel.show();
        //        btnGetWeather.addActionListener(new ActionListener(){
        //            @Override
        //            public void actionPerformed(ActionEvent ae){
        //               Weather weatherPanel = new Weather();
        //               weatherPanel.setVisible(true);
        //            }
        //        });
    }//GEN-LAST:event_btnGetWeatherActionPerformed

    //method to get the XML directions out of Google Restful web services *************************************************************
    private void btnGetDirectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDirectionsActionPerformed
        //clear the screen and print directions
        txtDisplay.setText("Google Maps API Rest response - Driving directions from: " + cBoxFromMaps.getSelectedItem().toString()
                + " to: " + cBoxToMaps.getSelectedItem().toString() + " are: \n");
        txtDisplay.append("\n");

        //get the response from Google Maps
        String urlToGetRestFulService = "";
        String fromCity = "";
        String toCity = "";
        try {
            urlToGetRestFulService = "http://maps.googleapis.com/maps/api/directions/xml?origin="
                    + cBoxFromMaps.getSelectedItem().toString()
                    + "&destination=" + cBoxToMaps.getSelectedItem().toString();
            URL mapURL = new URL(urlToGetRestFulService);

            try {
                //create the xPath
                XPath xpathGetMaps = XPathFactory.newInstance().newXPath();
                InputSource restResponse = new InputSource(mapURL.openConnection().getInputStream());

                NodeList responseNode = (NodeList) xpathGetMaps.evaluate("/DirectionsResponse//step", restResponse, XPathConstants.NODESET);
                String duration;
                String distance;
                String instructions;

                //loop through thte result
                for (int i = 0; i < responseNode.getLength(); i++) {
                    //get the value of relevant instructions
                    duration = (String) xpathGetMaps.evaluate("duration/text", responseNode.item(i), XPathConstants.STRING);
                    distance = (String) xpathGetMaps.evaluate("distance/text", responseNode.item(i), XPathConstants.STRING);
                    instructions = (String) xpathGetMaps.evaluate("html_instructions", responseNode.item(i), XPathConstants.STRING);
                    String textInstructions = instructions.replaceAll("\\<.*?>", "");

                    txtDisplay.append(textInstructions);
                    txtDisplay.append("\n for " + distance + " approximately " + duration);
                    //txtDisplay.append("distance is " + distance);
                    txtDisplay.append("\n");
                }//ends for loop

            } catch (IOException | XPathExpressionException e) {
                showMessageDialog(null, e.getMessage());
            }

            //            HttpURLConnection conn = (HttpURLConnection) mapURL.openConnection();
            //
            //            // Check for successful response code or throw error
            //            if (conn.getResponseCode() != 200) {
            //                throw new IOException(conn.getResponseMessage());
            //            }
            //
            //            BufferedReader ins = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            //            String inString;
            //            StringBuilder sb = new StringBuilder();
            //
            //             //write to the file the results ***********************************
            //                PrintWriter writer = new PrintWriter("xml.xml", "ISO-8859-1");
            //
            //            while ((inString = ins.readLine()) != null) {
            //                //File xmlFile = new File("xml.xml");
            //                sb.append(inString);
            //               //Append a line to the file ***********************************
            //                writer.println(inString);
            //            }
            //            //close the file *****************************************
            //             writer.close();
            //            System.out.println("The url requested is" + urlToGetRestFulService);
            //            System.out.println(sb.toString());
            //            ins.close();
        } catch (MalformedURLException me) {
            System.out.println("MalformedURLException: " + me);
        }

        //        //print to the screen *************************************************
        //        XPathFactory factory = XPathFactory.newInstance();
        //
        //        XPath xpath = factory.newXPath();
        //        try {
        //            System.out.println("Web Service Parser\n");
        //
        //            // In practice, you'd retrieve your XML via an HTTP request.
        //            // Here we simply access an existing file.
        //            File xmlFile = new File("xml.xml");
        //
        //            // The xpath evaluator requires the XML be in the format of an InputSource setEncoding("ISO-8859-1");
        //            InputSource inputXml = new InputSource(new FileInputStream(xmlFile));
        //            inputXml.setEncoding("ISO-8859-1");
        //
        //            // Because the evaluator may return multiple entries, we specify that the expression
        //            // return a NODESET and place the result in a NodeList.
        //            NodeList nodes = (NodeList) xpath.evaluate("/DirectionsResponse//html_instructions", inputXml, XPathConstants.NODESET);
        //           // NodeList distanceNodes = (NodeList) xpath.evaluate("/DirectionsResponse//distance/text", inputXml, XPathConstants.NODESET);
        //            // NodeList durationNodes = (NodeList) xpath.evaluate("/DirectionsResponse//duration/text", inputXml, XPathConstants.NODESET);
        //
        //            // We can then iterate over the NodeList and extract the content via getTextContent().
        //            // NOTE: this will only return text for element nodes at the returned context.
        //            txtDisplay.setText("Directions are: \n");
        //            for (int i = 0, n = nodes.getLength(); i < n; i++) {
        //                String htmlInstructionsString = nodes.item(i).getTextContent();
        //                //String distanceNodesString = distanceNodes.item(i).getTextContent();
        //                //String durationNodesString = durationNodes.item(i).getTextContent();
        //                String newNode = htmlInstructionsString.replace("<b>", "");
        //                htmlInstructionsString = newNode.replace("</b>", "");
        ////                nodeString.replace("<b>", "");
        ////                newNode.replaceAll("</b>", "");
        //                System.out.println(htmlInstructionsString);
        //                txtDisplay.append(htmlInstructionsString);
        //                txtDisplay.append("\n");
        //                System.out.println("\n");
        //            }
        //
        //        } catch (XPathExpressionException ex) {
        //            System.out.println("XPath Error " + ex.getMessage().toString());
        //        } catch (FileNotFoundException ex) {
        //            System.out.println("File Error " + ex.getMessage().toString());
        //        }
    }//GEN-LAST:event_btnGetDirectionsActionPerformed

    //void to book a ticket ****************************************************************************************
    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        //check if username is null
        try {
            if (txtPassengerName.getText().equals("")) {
                txtDisplay.setText("Try again");
                showMessageDialog(null, "please enter a passenger name");

            } else {
                //get the values
                String temp = cBoxFlightID.getSelectedItem().toString();
                int flightIDToBook = Integer.valueOf(temp);
                temp = cBoxNumberOfTickets.getSelectedItem().toString();
                int ticketsToBook = Integer.valueOf(temp);
                Random ticket = new Random();
                temp = cBoxNumberOfTickets.getSelectedItem().toString();
                int numberofTicketsPurchased = Integer.valueOf(temp);
                DecimalFormat priceToConvert = new DecimalFormat("#.00");

                //call the SOAP method
                FlightType bookingMade = bookTicket(flightIDToBook, txtPassengerName.getText(), ticketsToBook);
                //bookTicket(flightIDToBook, txtPassengerName.getText(), ticketsToBook);

                //display booking confirmation
                txtDisplay.setText("Congratulations " + txtPassengerName.getText().toString()
                        + " your booking has gone through.\nYour ticket reference number is " + ticket.nextInt(100000));
                txtDisplay.append("\nDetails are:\n");

                txtDisplay.append("\nFlying from: " + bookingMade.getOriginCity()
                        + "\nTo: " + bookingMade.getDestinationCity()
                        + "\nOn the " + bookingMade.getDate() + " at " + bookingMade.getTime()
                        + "\nAirline: " + bookingMade.getAirline()
                        + "\nFlight ID: " + bookingMade.getFlightID()
                        + " at the price of £" + priceToConvert.format(bookingMade.getFare().getValue() * numberofTicketsPurchased));

                //clean out the passenger name
                txtPassengerName.setText("");
            }//ends else txt box is empty

        } catch (Exception e) {
            System.out.println(e.getMessage().toString());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnBookActionPerformed

    //void to happen when he customer add the flight ID
    private void cBoxFlightIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxFlightIDItemStateChanged
        try {
            //Fill in number of available tickets in a flight
            cBoxNumberOfTickets.enable(true);
            String FlighIDChosen = (String) cBoxFlightID.getSelectedItem();
            int FlighID = Integer.valueOf(FlighIDChosen);
            int counter = getAvailableSeats(FlighID);

            cBoxNumberOfTickets.removeAllItems();
            for (int i = 1; i <= counter; i++) {
                cBoxNumberOfTickets.addItem(i);
            }
        } catch (Exception e) {
            showMessageDialog(null, e.getMessage().toString());
        }
    }//GEN-LAST:event_cBoxFlightIDItemStateChanged

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed

        try {
            //get the code from the currency text
            String currencySelected = cBoxCurrency.getSelectedItem().toString();
            String[] currencyCode = currencySelected.split("-");
            String codeCurrency = currencyCode[0].replaceAll("\\s+$", "");

            System.out.println("The conversion in " + codeCurrency + " is: " + getConversionRate("GBP", codeCurrency));

            //cBoxCurrency.addItem(getCurrencyCodes());
            //txtDisplay.setText("The conversion in " + currencySelected + " is: " + getConversionRate("GBP", codeCurrency));
            double currencyValue = getConversionRate("GBP", codeCurrency);

            //check if direct flights was selected
            String directFlightSelected = "no";
            if (rBtnDirectFlights.isSelected()) {
                directFlightSelected = "yes";
            }
            //rBtnDirectFlights.isSelected();

            //****************************** returning city options *************************************
            //display jourey searched
            List<FlightType> availableFlights = new ArrayList<FlightType>();
            availableFlights = searchJourney(cBoxOriginCities.getSelectedItem().toString(), cBoxDestinationCity.getSelectedItem().toString(), directFlightSelected);

            //create the class
            FlightType availableJourney = new FlightType();
            String temp = cBoxNumberOfTicketsSearch.getSelectedItem().toString();
            int numberOfTicketsselected = Integer.valueOf(temp);
            DecimalFormat priceToConvert = new DecimalFormat("#.00");

            //iterates through the list of flights the response from th ewe  service
            Iterator itr = availableFlights.iterator();

            //        //set a new font
            //        Font blueFont = new Font("Verdana", Font.BOLD, 16);
            //        Font blackFont = new Font("Verdana", Font.PLAIN, 12);
            //        txtDisplay.setFont(blueFont);
            //        txtDisplay.setForeground(Color.BLUE);
            txtDisplay.setText("Journey/s found: \n");
            //        txtDisplay.setFont(blackFont);
            //        txtDisplay.setForeground(Color.BLACK);
            while (itr.hasNext()) {
                availableJourney = (FlightType) itr.next();
                txtDisplay.append("\nFlight ID is: "
                        + availableJourney.getFlightID()
                        + "\nFrom: " + availableJourney.getOriginCity()
                        + "\nTo: " + availableJourney.getDestinationCity()
                        + "\nDate: " + availableJourney.getDate() + " at " + availableJourney.getTime()
                        + "\nAirline: " + availableJourney.getAirline() + " with " + availableJourney.getConnections() + " Connection/s"
                        + "\nAvailable tickets: " + availableJourney.getAvailableSeats()
                        + "\nSingle Ticket value is: " + priceToConvert.format(availableJourney.getFare().getValue() * currencyValue)
                        + "\nTotal cost is: " + priceToConvert.format((availableJourney.getFare().getValue() * currencyValue) * numberOfTicketsselected)
                        + "\nPrices shown as " + cBoxCurrency.getSelectedItem());
                txtDisplay.append("\n**********************\n");
            }

            System.out.println("This is the raw result :" + searchJourney("London", "Leeds", "yes"));
            System.out.println(availableFlights);

        } catch (Exception e) {
            showMessageDialog(null, e.getMessage().toString());
        }
    }//GEN-LAST:event_btnGoActionPerformed

    //method to update the destination cities based on the origin cities changes
    private void cBoxOriginCitiesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cBoxOriginCitiesItemStateChanged
        try {
            //Fill in destination city
            List<String> citiesAvailableTo = new ArrayList<String>();
            citiesAvailableTo = getDestinationCity(cBoxOriginCities.getSelectedItem().toString());
            Iterator itrCitiesTo = citiesAvailableTo.iterator();
            cBoxDestinationCity.removeAllItems();
            while (itrCitiesTo.hasNext()) {
                cBoxDestinationCity.addItem(itrCitiesTo.next().toString());
            }
            //ends action listener for the item changed in origin city

        } catch (Exception e) {
            showMessageDialog(null, e.getMessage().toString());
        }
    }//GEN-LAST:event_cBoxOriginCitiesItemStateChanged

    //************************ buton to refresh all the flights actrion ************************************
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        String response = fillFlights();
        showMessageDialog(null, response);
    }//GEN-LAST:event_btnRefreshActionPerformed

    //********************************* get flights by date button actions ********************************
    private void btnGetFlightByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetFlightByDateActionPerformed

        try {
            //get the code from the currency text
            String currencySelected = cBoxCurrency.getSelectedItem().toString();
            String[] currencyCode = currencySelected.split("-");
            String codeCurrency = currencyCode[0].replaceAll("\\s+$", "");
            //get the currency value chosen by the user
            double currencyValue = getConversionRate("GBP", codeCurrency);

            //display joureys searched
            List<FlightType> availableFlights = new ArrayList<FlightType>();
            availableFlights = getFlightByDate(txtDate.getText().toString());

            //create the class
            FlightType availableJourney = new FlightType();
            //get the tickets selected, and create a double number format
            String temp = cBoxNumberOfTicketsSearch.getSelectedItem().toString();
            int numberOfTicketsselected = Integer.valueOf(temp);
            DecimalFormat priceToConvert = new DecimalFormat("#.00");

            //iterates through the list of flights the response from th ewe  service
            Iterator itr = availableFlights.iterator();
            txtDisplay.setText("Journey/s found: \n");
            while (itr.hasNext()) {
                availableJourney = (FlightType) itr.next();
                txtDisplay.append("\nFlight ID is: "
                        + availableJourney.getFlightID()
                        + "\nFrom: " + availableJourney.getOriginCity()
                        + "\nTo: " + availableJourney.getDestinationCity()
                        + "\nDate: " + availableJourney.getDate() + " at " + availableJourney.getTime()
                        + "\nAirline: " + availableJourney.getAirline() + " with " + availableJourney.getConnections() + " Connection/s"
                        + "\nAvailable tickets: " + availableJourney.getAvailableSeats()
                        + "\nSingle Ticket value is: " + priceToConvert.format(availableJourney.getFare().getValue() * currencyValue)
                        + "\nTotal cost is: " + priceToConvert.format((availableJourney.getFare().getValue() * currencyValue) * numberOfTicketsselected)
                        + "\nPrices shown as " + cBoxCurrency.getSelectedItem());
                txtDisplay.append("\n**********************\n");
            }
        } catch (Exception e) {
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnGetFlightByDateActionPerformed

    //********************************* method to check flight info *********************************************
    private void btnCheckFlightInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckFlightInfoActionPerformed
       try {
            //get the values
            String temp = cBoxFlightIDInfo.getSelectedItem().toString();
            int flightIDToBook = Integer.valueOf(temp);
            int ticketsToBook = 0;
            //call the SOAP method
            FlightType bookingMade = bookTicket(flightIDToBook, "nobody", ticketsToBook);
               
            //Print the result to the text box
            txtDisplay.setText("\flight Details are: \n");

            txtDisplay.append("\nFlight ID = " + bookingMade.getFlightID()
                    + "\nFrom: " + bookingMade.getOriginCity() + " - " + bookingMade.getOriginAddress()
                    + "\nTo: " + bookingMade.getDestinationCity() + " - " + bookingMade.getDestinationAddress()
                    + "\nOn the " + bookingMade.getDate() + " at " + bookingMade.getTime()
                    + "\nAirline: " + bookingMade.getAirline()
                    + "\nSeats left: " + bookingMade.getAvailableSeats()
                    + "\nNumber of Connections = " + bookingMade.getConnections()
                    + "\nAt the price of £" + bookingMade.getFare().getValue() + " (" + bookingMade.getFare().getCurrency() + ") ");

        } catch (Exception e) {
            System.out.println(e.getMessage().toString());
            showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCheckFlightInfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new clientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnCheckFlightInfo;
    private javax.swing.JButton btnGetDirections;
    private javax.swing.JButton btnGetFlightByDate;
    private javax.swing.JButton btnGetWeather;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox cBoxCityWeather;
    private javax.swing.JComboBox cBoxCurrency;
    private javax.swing.JComboBox cBoxDestinationCity;
    private javax.swing.JComboBox cBoxFlightID;
    private javax.swing.JComboBox cBoxFlightIDInfo;
    private javax.swing.JComboBox cBoxFromMaps;
    private javax.swing.JComboBox cBoxNumberOfTickets;
    private javax.swing.JComboBox cBoxNumberOfTicketsSearch;
    private javax.swing.JComboBox cBoxOriginCities;
    private javax.swing.JComboBox cBoxToMaps;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCityWeather;
    private javax.swing.JLabel lblCurrency;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblNumberOfTickets;
    private javax.swing.JLabel lblOrigin;
    private javax.swing.JLabel lblPassengerName;
    private javax.swing.JLabel lblTo;
    private javax.swing.JLabel lblflightID;
    private javax.swing.JRadioButton rBtnDirectFlights;
    private javax.swing.JTabbedPane tpaneSearchBookings;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtPassengerName;
    // End of variables declaration//GEN-END:variables

//********************************* Web Service Methods ***********************************
    //currency converter method that takes both currency codes and return a double
    private static double getConversionRate(java.lang.String arg0, java.lang.String arg1) {
        currency.CurrencyConversionWSService service = new currency.CurrencyConversionWSService();
        currency.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getConversionRate(arg0, arg1);
    }

    //currency converter which takes all the currencies codes
    private static java.util.List<java.lang.String> getCurrencyCodes() {
        currency.CurrencyConversionWSService service = new currency.CurrencyConversionWSService();
        currency.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getCurrencyCodes();
    }

    //search flight from flight agency
    private static java.util.List<flight.FlightType> searchJourney(java.lang.String arg0, java.lang.String arg1, java.lang.String arg2) {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.searchJourney(arg0, arg1, arg2);
    }

    //method from flight agency to get all the origin cities
    private static java.util.List<java.lang.String> getOriginCities() {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.getOriginCities();
    }

    //method from flights ws to get the destination cities of a selected origin city
    private static java.util.List<java.lang.String> getDestinationCity(java.lang.String originCity) {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.getDestinationCity(originCity);
    }

    //method from Flight Agency to get how many seats is availble on a specific journey
    private static int getAvailableSeats(int flightID) {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.getAvailableSeats(flightID);
    }

    //method from Flight agency which get all the flights IDs
    private static java.util.List<java.lang.String> getFlightIDs() {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.getFlightIDs();
    }

    //method from Flight Agency to book a ticket
    private static FlightType bookTicket(int arg0, java.lang.String arg1, int arg2) {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.bookTicket(arg0, arg1, arg2);
    }

    //method to get all of the addresses of the airports
    private static java.util.List<java.lang.String> getAirportAddress() {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.getAirportAddress();
    }

    //method to efresh all the flights with full seats availability
    private static String fillFlights() {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.fillFlights();
    }

    //method to search by date, it returns date chosen plus day before and after
    private static java.util.List<flight.FlightType> getFlightByDate(java.lang.String date) {
        flight.FlightsWS_Service service = new flight.FlightsWS_Service();
        flight.FlightsWS port = service.getFlightsWSPort();
        return port.getFlightByDate(date);
    }

}
